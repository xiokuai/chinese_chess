name: Build on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  cmake_build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            build_type: Release
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang
          - os: macos-latest
            c_compiler: clang
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}/alpha_beta_search

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Upload Library as artifact
      uses: actions/upload-artifact@v4
      if: matrix.os == 'ubuntu-latest'
      with:
        name: alpha_beta_search_lib-${{ matrix.os }}
        path: ${{ steps.strings.outputs.build-output-dir }}/libalpha_beta_search.so
        
    - name: Upload Library as artifact
      uses: actions/upload-artifact@v4
      if: matrix.os == 'windows-latest'
      with:
        name: alpha_beta_search_lib-${{ matrix.os }}
        path: ${{ steps.strings.outputs.build-output-dir }}/Release/alpha_beta_search.dll

    - name: Upload Library as artifact
      uses: actions/upload-artifact@v4
      if: matrix.os == 'macos-latest'
      with:
        name: alpha_beta_search_lib-${{ matrix.os }}
        path: ${{ steps.strings.outputs.build-output-dir }}/libalpha_beta_search.dylib

    #- name: Test
    #  working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #  # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
    #  # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #  run: ctest --build-config ${{ matrix.build_type }}

  build_python:
    runs-on: ${{ matrix.os }}
    needs: cmake_build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download C library
        uses: actions/download-artifact@v4
        with:
          name: alpha_beta_search_lib-${{ matrix.os }}
          path: clib_build

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install deps
        run: |
          pip install --upgrade pip
          pip install -r chinese_chess/requirements.txt
          pip install pyinstaller

      - name: Build Python exe
        run: |
          pyinstaller -F chinese_chess/main.py -n chinese_chess --icon=chinese_chess/logo.ico --uac-admin --add-binary "clib_build/*:."
      
      - name: Upload Python artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ matrix.os }}
          path: dist/*
